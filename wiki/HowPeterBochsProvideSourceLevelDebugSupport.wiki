#summary How Peter-Bochs provides source level debug support

= How Peter-Bochs provides source level debug support  ='
== Introduction ==

In last year, i started to provide c/c++ source level support for Peter-bochs debugger. My first idea is to load a map file, generate by gcc --print-map option. But this idea has many weak points:


1) in mac, linux, cygwin, all their gcc provide different format the the map file, hard to support all of them.

2) in my first idea, even i loaded everything from the map file, i still need to read out all the debug information from dwarf, i was totally look down the dwarf format. I thought dwarf+map file is everything, but i was wrong. ELF header+dwarf is king, they can provide me all information i need for source level debug support.

== peter-bochs current design ==

1) specific your ELF kernel in command line, e.g.:

-loadelf=/path_to_your/kernel

the -loadelf option support loading multiple file with specific memory offset, if you want to load multiple files, do this:

-loadelf=/path_to_your/kernel=0x100,/path_to_your/libpeter.a=0x200

!!! 0x100 is not the absolute memory location, peter-bochs will read out the VirtAddr from the ELF program header in your kernel, then add 0x100 to it. type "readelf -l your_kernel", you will know what loading address ELF has specified.

2) peter-bochs will call [https://code.google.com/p/peter-dwarf/ peter-dwarf] library to read our all dwarf information, 